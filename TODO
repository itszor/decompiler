TODO list for decompiler
========================

* Add missing instructions to decoder and insn_to_ir.

* Type tracking for (incoming) function parameters (outgoing ones are partly done). (Both are probably broken now!)

* Extract types for declarations of local variables.

* Handle scopes/nested scopes properly (by matching to basic blocks?)

  - source file "reconstruct.ml" might be a start at this, but not really.

* Speed up symbol access/mapping symbols (add suitable indices). [partly done]

* Add parallel-set support for 'S' flag support etc. (done -- no 'S' flag support yet though.)

* SP tracking falls over if it hits a phi node: fixable or not? Might suggest alloca or other dynamic stack allocation.

  - SP tracking is currently only used to provide a lower bound for "anonymous" addressable blocks, i.e. blocks whose address is taken, but which are not described in the debug info. We might be able to get away with incomplete or partial data.

* Emission of types and data symbols.

* Add loading of debug info for dependent libraries. [done]

* Use eabi.ml functions for incoming arguments as well as outgoing ones. [done]

* Finish handling of stack accesses.

  - any unknown stack object which has its address taken will need to be invented, after determining an upper bound for its size. Any access falling within this region is then potentially a part of the same object.

  - incomplete function arg information is causing the algorithm for this to
    break. [Function arg information is now supposedly complete, but the algo
    still doesn't work.]

  - A pass should remove *all* stack accesses -- or fail. E.g. there should be a point after which we can guarantee there are no explicit references to the stack in the IR.

* Finish conversion of IR to C AST (big task!).

* Fix EABI returns -- e.g. returning struct values "by reference" on the stack. [done]

* A pass to convert set/use of flags register into higher-level comparisons.

* Support holding struct values in registers -- mostly for argument passing, where we can't get away without it.

* Minipool resolution and lookup of symbols for constant pointers should be split into separate passes, so constants constructed from code can be turned into symbol references.

* Type reconstruction needs to be fixed.

* Change IR to be able to say, e.g.:

  C.Set (C.Entity (CT.Local_var ("xxx", <location>)), C.Call (...))

  i.e., changes to Local_var (to have a location), Call (& friends) to not terminate a basic block. This allows setting a result from a call in a more natural way, and means that code can be added to the end of a BB which contains a call (which currently does the wrong thing). [done]

* Fix defs.ml (and elsewhere?) for Concat & Parallel codes.

* Handle escape_by_phiarg in ptrtracking.ml. [done/in progress]

* Oops, phi nodes don't form a DAG. We'll have to iterate instead! [done]

* Ahhh, but cfa_offset has to be able to return a whole list of offsets, since different paths through the function might end up with any SSA name pointing to different parts of the stack. Maybe we should also dataflow "forward" rather than backward, so we can tell if we're losing stack offsets (by adding dynamic amounts to pointers). [done, mostly]

* I think we need a pass prior to track_all_stack_refs to identify adds/subs which are within loops, i.e. induction variables. Maybe make use of dgraph. [done]
